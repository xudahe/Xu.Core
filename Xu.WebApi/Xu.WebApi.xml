<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xu.WebApi</name>
    </assembly>
    <members>
        <member name="T:Blog.Core.Controllers.MonitorController">
            <summary>
            监控管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.MonitorController.Server">
            <summary>
            服务器配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.MonitorController.Get">
            <summary>
            SignalR send data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.MonitorController.GetAccessLogs(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            记录访问日志
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.TasksQzController">
            <summary>
            定时任务
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.Get(System.String)">
            <summary>
            获取全部定时任务
            </summary>
            <param name="key">任务名称</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.GetByPage(System.Int32,System.Int32,System.String)">
            <summary>
            获取全部定时任务并分页
            </summary>
            <param name="page">页码</param>
            <param name="pageSize">页大小</param>
            <param name="key">任务名称</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.Post(Xu.Model.Models.TasksQz)">
            <summary>
            添加计划任务
            </summary>
            <param name="tasksQz"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.Put(Xu.Model.Models.TasksQz)">
            <summary>
            更新计划任务
            </summary>
            <param name="tasksQz"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.StartJob(System.Int32)">
            <summary>
            启动计划任务
            </summary>
            <param name="jobId">任务Id（非空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.StopJob(System.Int32)">
            <summary>
            停止一个计划任务
            </summary>
            <param name="jobId">任务Id（非空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.ReCovery(System.Int32)">
            <summary>
            重启一个计划任务
            </summary>
            <param name="jobId">任务Id（非空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DbFirstController.#ctor(SqlSugar.ISqlSugarClient,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.DbFirstController.GetFrameFiles">
            <summary>
            获取 整体框架 文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DbFirstController.GetFrameFilesByTableNames(System.String[],System.String)">
            <summary>
            根据数据库表名 生成整体框架
            仅针对通过CodeFirst生成表的情况
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DbFirstController.GetAllFrameFilesByTableNames(System.String[],System.String)">
            <summary>
            DbFrist 根据数据库表名 生成整体框架,包含Model层
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.MigrateController">
            <summary>
            数据迁移
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.MigrateController.GetRMPMaps(System.String)">
            <summary>
            获取权限部分Map数据
            生成到tsb文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MigrateController.SaveDataToDb">
            <summary>
            保存数据到数据库
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.DeptController">
            <summary>
            部门管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.DeptController.Get(System.String,System.String)">
            <summary>
            获取部门数据
            </summary>
            <param name="ids">可空</param>
            <param name="deptName">部门名称（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DeptController.GetByPage(System.Int32,System.Int32,System.String)">
            <summary>
            获取全部部门并分页
            </summary>
            <param name="page">页码</param>
            <param name="pageSize">页大小</param>
            <param name="deptName">部门名称（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DeptController.Post(Xu.Model.Models.Dept)">
            <summary>
            添加部门
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DeptController.Put(Xu.Model.Models.Dept)">
            <summary>
            更新部门
            </summary>
            <param name="dept"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DeptController.Delete(System.Int32)">
            <summary>
            删除部门
            </summary>
            <param name="id">非空</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DeptController.Disable(System.Int32,System.Boolean)">
            <summary>
            禁用部门
            </summary>
            <param name="id">非空</param>
            <param name="falg">true(禁用),false(启用)</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.LoginController">
            <summary>
            登录管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.LoginController.#ctor(Xu.IServices.IUserSvc,Xu.IServices.IRoleSvc,Xu.Extensions.PermissionRequirement)">
            <summary>
            构造函数注入
            </summary>
            <param name="userSvc"></param>
            <param name="roleSvc"></param>
            <param name="requirement"></param>
        </member>
        <member name="M:Xu.WebApi.Controllers.LoginController.GetJwtToken(System.String,System.String)">
            <summary>
            获取JWT的方法（登录接口）
            </summary>
            <param name="name">登录名</param>
            <param name="pass">登录密码</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.LoginController.RefreshToken(System.String)">
            <summary>
            请求刷新Token（以旧换新）
            </summary>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.MenuController">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.Get(System.String,System.String)">
            <summary>
            获取菜单数据（列表）
            </summary>
            <param name="ids">可空</param>
            <param name="menuName">菜单名称（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.GetByPage(System.Int32,System.Int32,System.String)">
            <summary>
            获取全部菜单并分页
            </summary>
            <param name="page">页码</param>
            <param name="pageSize">页大小</param>
            <param name="menuName">菜单名称（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.GetByIds(System.String)">
            <summary>
            根据菜单Ids集合获取菜单数据（树状）
            </summary>
            <param name="ids">可空</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.Post(Xu.Model.Models.Menu)">
            <summary>
            添加菜单
            </summary>
            <param name="menu"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.Put(Xu.Model.Models.Menu)">
            <summary>
            更新菜单
            </summary>
            <param name="menu"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.Delete(System.Int32)">
            <summary>
            删除菜单
            </summary>
            <param name="id">非空</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.Disable(System.Int32,System.Boolean)">
            <summary>
            禁用菜单
            </summary>
            <param name="id">非空</param>
            <param name="falg">true(禁用),false(启用)</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.RoleController">
            <summary>
            角色管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.RoleController.Get(System.String,System.String)">
            <summary>
            获取角色数据
            </summary>
            <param name="ids">可空</param>
            <param name="roleName">角色名称（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.RoleController.GetByPage(System.Int32,System.Int32,System.String)">
            <summary>
            获取全部角色并分页
            </summary>
            <param name="page">页码</param>
            <param name="pageSize">页大小</param>
            <param name="roleName">角色名称（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.RoleController.Post(Xu.Model.Models.Role)">
            <summary>
            添加角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.RoleController.Put(Xu.Model.Models.Role)">
            <summary>
            更新角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.RoleController.Delete(System.Int32)">
            <summary>
            删除角色
            </summary>
            <param name="id">非空</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.RoleController.Disable(System.Int32,System.Boolean)">
            <summary>
            禁用角色
            </summary>
            <param name="id">非空</param>
            <param name="falg">true(禁用),false(启用)</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.UserController">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.#ctor(Xu.IRepository.IUnitOfWork,Xu.IServices.IUserSvc)">
            <summary>
            构造函数
            </summary>
            <param name="unitOfWork"></param>
            <param name="userSvc"></param>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.Get(System.String,System.String)">
            <summary>
            获取用户数据
            </summary>
            <param name="ids">可空</param>
            <param name="key">用户名/姓名（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.GetByPage(System.Int32,System.Int32,System.String)">
            <summary>
            获取全部用户并分页
            </summary>
            <param name="page">页码</param>
            <param name="pageSize">页大小</param>
            <param name="key">用户名/姓名（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.GetInfoByToken(System.String)">
            <summary>
            根据token获取用户详情
            </summary>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.Post(Xu.Model.Models.User)">
            <summary>
            添加用户
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.Put(Xu.Model.Models.User)">
            <summary>
            更新用户
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.Delete(System.Int32)">
            <summary>
            删除用户
            </summary>
            <param name="id">非空</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.Disable(System.Int32,System.Boolean)">
            <summary>
            禁用用户
            </summary>
            <param name="id">非空</param>
            <param name="falg">true(禁用),false(启用)</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:Xu.WebApi.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:Xu.WebApi.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:Xu.WebApi.CustomRouteAttribute.#ctor(Xu.Extensions.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
        <member name="T:Xu.WebApi.GlobalRouteAuthorizeConvention">
            <summary>
            Summary:全局路由权限公约
            Remarks:目的是针对不同的路由，采用不同的授权过滤器
            如果 controller 上不加 [Authorize] 特性，默认都是 Permission 策略
            否则，如果想特例其他授权机制的话，需要在 controller 上带上  [Authorize]，然后再action上自定义授权即可，比如 [Authorize(Roles = "Admin")]
            </summary>
        </member>
        <member name="T:Xu.WebApi.GlobalAuthorizeFilter">
            <summary>
            全局权限过滤器【无效】
            </summary>
        </member>
        <member name="T:Xu.WebApi.GlobalExceptionsFilter">
            <summary>
            全局异常错误日志
            </summary>
        </member>
        <member name="M:Xu.WebApi.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:Xu.WebApi.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:Xu.WebApi.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="T:Xu.WebApi.GlobalRoutePrefixFilter">
            <summary>
            全局路由前缀公约
            </summary>
        </member>
        <member name="T:Xu.WebApi.XSSFilterAttribute">
            <summary>
            XSS 过滤器
            </summary>
            <remarks>在需要进行XSS过滤的控制器或者action上加上对应的[XSSFilt]属性即可</remarks>
        </member>
        <member name="M:Xu.WebApi.XSSFilterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            OnActionExecuting
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Xu.WebApi.XSSFilterAttribute.PostModelFieldFilter(System.Type,System.Object)">
            <summary>
            遍历实体的字符串属性
            </summary>
            <param name="type">数据类型</param>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Program.Main(System.String[])">
            <summary>
            Main方法负责初始化Web主机，调用Startup和执行应用程序
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Xu.WebApi.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            应用程序运行时将服务添加到容器中
            </summary>
            <param name="services"></param>
            <remarks>
            权重：AddSingleton→AddTransient→AddScoped
            AddSingleton的生命周期：项目启动-项目关闭 相当于静态类  只会有一个
            AddScoped   的生命周期：请求开始-请求结束  在这次请求中获取的对象都是同一个
            AddTransient的生命周期：请求获取-（GC回收-主动释放） 每一次获取的对象都不是同一个
            </remarks>
        </member>
    </members>
</doc>
