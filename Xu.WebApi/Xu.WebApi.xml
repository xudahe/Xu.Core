<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xu.WebApi</name>
    </assembly>
    <members>
        <member name="T:Blog.Core.Controllers.FileController">
            <summary>
            图片管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.FileController.DownloadPicture(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            下载图片（支持中文字符）
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.FileController.InsertPicture(Xu.Model.UploadFileDto)">
            <summary>
            上传图片,多文件
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.FileController.FileUpload(Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            文件切片上传(测试)
            </summary>
            <param name="environment"></param>
            <param name="file">文件</param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.WeChatCompanyController">
            <summary>
            WeChatCompanyController
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.#ctor(Xu.IServices.IWeChatCompanyServices)">
            <summary>
            构造函数
            </summary>
            <param name="iWeChatCompanyServices"></param>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.Get(Xu.Model.PaginationModel)">
            <summary>
            获取
            </summary>
            <param name="pagination">分页条件</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.Get(System.String)">
            <summary>
            获取(id)
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.Post(Xu.Model.Models.WeChatCompany)">
            <summary>
            添加
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.Put(Xu.Model.Models.WeChatCompany)">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.Delete(System.String)">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.BatchDelete(System.String)">
            <summary>
            批量删除
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.WeChatConfigController">
            <summary>
            WeChatConfigController
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.#ctor(Xu.IServices.IWeChatConfigServices)">
            <summary>
            构造函数
            </summary>
            <param name="iWeChatConfigServices"></param>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.Get(Xu.Model.PaginationModel)">
            <summary>
            获取
            </summary>
            <param name="pagination">分页条件</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.Get(System.String)">
            <summary>
            获取(id)
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.Post(Xu.Model.Models.WeChatConfig)">
            <summary>
            添加
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.Put(Xu.Model.Models.WeChatConfig)">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.Delete(System.String)">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.BatchDelete(System.String)">
            <summary>
            批量删除
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.WeChatSubController">
            <summary>
            WeChatSubController
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.#ctor(Xu.IServices.IWeChatSubServices)">
            <summary>
            构造函数
            </summary>
            <param name="iWeChatSubServices"></param>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.Get(Xu.Model.PaginationModel)">
            <summary>
            获取
            </summary>
            <param name="pagination">分页条件</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.Get(System.String)">
            <summary>
            获取(id)
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.Post(Xu.Model.Models.WeChatSub)">
            <summary>
            添加
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.Put(Xu.Model.Models.WeChatSub)">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.Delete(System.String)">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.BatchDelete(System.String)">
            <summary>
            批量删除
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.NacosController">
            <summary>
            服务管理
            </summary>
        </member>
        <member name="F:Blog.Core.Api.Controllers.NacosController.NacosNamingService">
            <summary>
            INacosNamingService
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.NacosController.#ctor(Nacos.V2.INacosNamingService)">
             <summary>
            
             </summary>
             <param name="nacosNamingService"></param>
        </member>
        <member name="M:Blog.Core.Api.Controllers.NacosController.CheckSystemStartFinish">
            <summary>
            系统实例是否启动完成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.NacosController.GetStatus">
            <summary>
            获取Nacos 状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.NacosController.Register">
            <summary>
            服务上线
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.NacosController.Deregister">
            <summary>
            服务下线
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.MonitorController">
            <summary>
            监控管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.MonitorController.GetServerInfo">
            <summary>
            服务器配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MonitorController.Get">
            <summary>
            SignalR send data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MonitorController.GetIpLogByDate">
            <summary>
            Ip 请求日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MonitorController.GetLogInfo(System.Int32)">
            <summary>
            获取前N条所有日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MonitorController.GetAccessLogs">
            <summary>
            Api请求访问日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MonitorController.GetActiveUsers(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            活跃用户
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="P:Xu.WebApi.Controllers.WelcomeInitData.ActiveUsers">
            <summary>
            今日活跃用户
            </summary>
        </member>
        <member name="P:Xu.WebApi.Controllers.WelcomeInitData.ActiveUserCount">
            <summary>
            今日活跃用户数量
            </summary>
        </member>
        <member name="P:Xu.WebApi.Controllers.WelcomeInitData.Logs">
            <summary>
            访问日志
            </summary>
        </member>
        <member name="P:Xu.WebApi.Controllers.WelcomeInitData.ErrorCount">
            <summary>
            今日异常数量
            </summary>
        </member>
        <member name="P:Xu.WebApi.Controllers.WelcomeInitData.ActiveCount">
            <summary>
            本月活跃用户
            </summary>
        </member>
        <member name="T:Xu.WebApi.Controllers.PublicController">
            <summary>
            公共接口
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.PublicController.GetRSACryption(System.Int32)">
            <summary>
            生成PEM格式的公钥和密钥
            </summary>
             <param name="strength">长度</param>
            <returns>Item1:公钥；Item2:私钥；</returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.QRCodeController">
            <summary>
            二维码
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.QRCodeController.GetPTQRCode(System.String,System.Int32)">
             <summary>
            生成二维码（路径）
             </summary>
             <param name="plainText">存储内容</param>
             <param name="pixel">像素大小</param>
             <returns>返回二维码路径</returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.QRCodeController.GetBTQRCode(System.String,System.Int32)">
             <summary>
            生成二维码（byte数组）
             </summary>
             <param name="plainText">存储内容</param>
             <param name="pixel">像素大小</param>
             <returns>返回二维码路径</returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.QRCodeController.GetBSQRCode(System.String,System.Int32)">
             <summary>
            生成二维码（Base64）
             </summary>
             <param name="plainText">存储内容</param>
             <param name="pixel">像素大小</param>
             <returns>返回二维码路径</returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.TasksQzController">
            <summary>
            任务调度
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.GetTasksQz(System.String,System.String)">
            <summary>
            获取全部任务
            </summary>
            <param name="ids">可空</param>
            <param name="jobName">任务名称(可空)</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.GetTasksQzByPage(System.Int32,System.Int32,System.String)">
            <summary>
            获取全部任务并分页
            </summary>
            <param name="page">页码</param>
            <param name="pageSize">页大小</param>
            <param name="jobName">任务名称</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.PostTasksQz(Xu.Model.Models.TasksQz)">
            <summary>
            添加计划任务
            </summary>
            <param name="tasksQz"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.PutTasksQz(Xu.Model.Models.TasksQz)">
            <summary>
            更新计划任务
            </summary>
            <param name="tasksQz"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.DeleteTasksQz(System.Int32)">
            <summary>
            删除计划任务
            </summary>
            <param name="id">非空</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.StartJob(System.Int32)">
            <summary>
            启动计划任务
            </summary>
            <param name="id">任务Id（非空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.StopJob(System.Int32)">
            <summary>
            停止计划任务
            </summary>
            <param name="id">任务Id（非空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.ReCovery(System.Int32)">
            <summary>
            重启计划任务
            </summary>
            <param name="id">任务Id（非空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.TasksQzController.GetTaskNameSpace">
            <summary>
            获取任务命名空间
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.Base.UploaderController">
            <summary>
            文件管理--配合前端vue-simple-uploader插件使用
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.Base.UploaderController.SimpleUploader(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            分片上传文件前，检查哪些文件已上传
            </summary>
            <param name="chunkNumber">当前块的次序，第一个块是 1，注意不是从 0 开始的。</param>
            <param name="chunkSize">分块大小，根据 totalSize 和这个值你就可以计算出总共的块数。注意最后一块的大小可能会比这个要大</param>
            <param name="currentChunkSize">当前块的大小，实际大小</param>
            <param name="totalSize">文件总大小。</param>
            <param name="identifier">文件的唯一标示。MD5</param>
            <param name="filename">文件名。</param>
            <param name="relativePath">文件夹上传的时候文件的相对路径属性。</param>
            <param name="totalChunks">文件被分成块的总数。</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.Base.UploaderController.SimpleUploader">
            <summary>
            校验完成后，上传分片文件
            重载，无参数的同名Upload方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.Base.UploaderController.FileMerge(System.String,System.String)">
            <summary>
            分片合并
            </summary>
            <param name="fileName">文件名</param>
            <param name="tempPath">临时文件夹（以文件MD5码命名）</param>
        </member>
        <member name="M:Xu.WebApi.Controllers.DbFirstController.#ctor(SqlSugar.ISqlSugarClient,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Xu.IServices.ITableData)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.DbFirstController.GetFrameFiles">
            <summary>
            获取 整体框架 文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DbFirstController.GetFrameFilesByTableNames(System.String[],System.String)">
            <summary>
            根据数据库表名 生成整体框架
            仅针对通过CodeFirst生成表的情况
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DbFirstController.GetAllFrameFilesByTableNames(System.String[],System.String)">
            <summary>
            DbFrist 根据数据库表名 生成整体框架,包含Model层
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DbFirstController.GetDataFilesAsync(System.String)">
            <summary>
            数据库基础表数据导出到json文件
            </summary>
            <param name="tableName">指定表名称</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.DeptController">
            <summary>
            部门管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.DeptController.GetDept(System.String,System.String)">
            <summary>
            获取部门数据
            </summary>
            <param name="ids">部门id或guid集合（可空）</param>
            <param name="key">部门名称或部门简码（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DeptController.GetDeptByPage(System.Int32,System.Int32,System.String)">
            <summary>
            获取全部部门并分页
            </summary>
            <param name="page">页码</param>
            <param name="pageSize">页大小</param>
            <param name="deptName">部门名称（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DeptController.PostDept(Xu.Model.Models.Dept)">
            <summary>
            添加部门
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DeptController.PutDept(Xu.Model.Models.Dept)">
            <summary>
            更新部门
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DeptController.DeleteDept(System.Int32)">
            <summary>
            删除部门
            </summary>
            <param name="id">部门id（非空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.DeptController.DisableDept(System.Int32,System.Boolean)">
            <summary>
            禁用部门
            </summary>
            <param name="id">部门id（非空）</param>
            <param name="falg">true(禁用),false(启用)</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.LoginController">
            <summary>
            登录管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.LoginController.#ctor(AutoMapper.IMapper,Xu.IServices.IUserSvc,Xu.IServices.IRoleSvc,Xu.IServices.IMenuSvc,Xu.Extensions.PermissionRequirement)">
            <summary>
            构造函数注入
            </summary>
            <param name="mapper"></param>
            <param name="userSvc"></param>
            <param name="roleSvc"></param>
            <param name="menuSvc"></param>
            <param name="requirement"></param>
        </member>
        <member name="M:Xu.WebApi.Controllers.LoginController.GetJwtToken(System.String,System.String)">
            <summary>
            获取JWT的方法（登录接口）
            </summary>
            <param name="name">登录名</param>
            <param name="pass">登录密码</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.LoginController.RefreshToken(System.String)">
            <summary>
            请求刷新Token（以旧换新）
            </summary>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.LoginController.SwgLogin(Xu.WebApi.Controllers.SwaggerLoginRequest)">
            <summary>
            swagger登录
            </summary>
            <param name="loginRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.LoginController.GetLoginByToken(System.String)">
            <summary>
            根据token获取登录信息
            </summary>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.MenuController">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.GetMenu(System.String,System.String,System.String)">
            <summary>
            获取菜单数据（列表）
            </summary>
            <param name="ids">菜单id或guid集合（可空）</param>
            <param name="menuName">菜单名称（可空）</param>
            <param name="parentId">父级菜单Id（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.GetMenuByPage(System.Int32,System.Int32,System.String)">
            <summary>
            获取全部菜单并分页
            </summary>
            <param name="page">页码</param>
            <param name="pageSize">页大小</param>
            <param name="menuName">菜单名称（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.GetMenuByIds(System.String)">
            <summary>
            根据菜单Ids集合获取菜单数据（树状）
            </summary>
            <param name="ids">菜单id或guid集合（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.PostMenu(Xu.Model.Models.Menu)">
            <summary>
            添加菜单
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.PutMenu(Xu.Model.Models.Menu)">
            <summary>
            更新菜单
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.DeleteMenu(System.Int32)">
            <summary>
            删除菜单
            </summary>
            <param name="id">菜单id（非空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.MenuController.DisableMenu(System.Int32,System.Boolean)">
            <summary>
            禁用菜单
            </summary>
            <param name="id">菜单id（非空）</param>
            <param name="falg">true(禁用),false(启用)</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.PlatformController">
            <summary>
            平台管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.PlatformController.GetPlatform(System.String,System.String)">
            <summary>
            获取平台数据
            </summary>
            <param name="ids">平台id或guid集合（可空）</param>
            <param name="key">平台名称或平台简码（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.PlatformController.GetPlatformByPage(System.Int32,System.Int32,System.String)">
            <summary>
            获取全部平台并分页
            </summary>
            <param name="page">页码</param>
            <param name="pageSize">页大小</param>
            <param name="deptName">平台名称（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.PlatformController.PostPlatform(Xu.Model.Models.Platform)">
            <summary>
            添加平台
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.PlatformController.PutPlatform(Xu.Model.Models.Platform)">
            <summary>
            更新平台
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.PlatformController.DeletePlatform(System.Int32)">
            <summary>
            删除平台
            </summary>
            <param name="id">平台id（非空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.PlatformController.DisablePlatform(System.Int32,System.Boolean)">
            <summary>
            禁用平台
            </summary>
            <param name="id">平台id（非空）</param>
            <param name="falg">true(禁用),false(启用)</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.RoleController">
            <summary>
            角色管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.RoleController.GetRole(System.String,System.String)">
            <summary>
            获取角色数据
            </summary>
            <param name="ids">角色id或guid集合（可空）</param>
            <param name="key">角色名称或角色简码（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.RoleController.GetRoleByPage(System.Int32,System.Int32,System.String)">
            <summary>
            获取全部角色并分页
            </summary>
            <param name="page">页码</param>
            <param name="pageSize">页大小</param>
            <param name="roleName">角色名称（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.RoleController.PostRole(Xu.Model.Models.Role)">
            <summary>
            添加角色
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.RoleController.PutRole(Xu.Model.Models.Role)">
            <summary>
            更新角色
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.RoleController.DeleteRole(System.Int32)">
            <summary>
            删除角色
            </summary>
            <param name="id">角色id（非空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.RoleController.DisableRole(System.Int32,System.Boolean)">
            <summary>
            禁用角色
            </summary>
            <param name="id">角色id（非空）</param>
            <param name="falg">true(禁用),false(启用)</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.SystemController">
            <summary>
            系统管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.SystemController.GetSystem(System.String,System.String)">
            <summary>
            获取系统数据
            </summary>
            <param name="ids">系统id或guid集合（可空）</param>
            <param name="key">系统名称或系统简码（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.SystemController.GetSystemByPage(System.Int32,System.Int32,System.String)">
            <summary>
            获取全部系统并分页
            </summary>
            <param name="page">页码</param>
            <param name="pageSize">页大小</param>
            <param name="deptName">系统名称（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.SystemController.PostSystem(Xu.Model.Models.Systems)">
            <summary>
            添加系统
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.SystemController.PutSystem(Xu.Model.Models.Systems)">
            <summary>
            更新系统
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.SystemController.DeleteSystem(System.Int32)">
            <summary>
            删除系统
            </summary>
            <param name="id">系统id（非空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.SystemController.DisableSystem(System.Int32,System.Boolean)">
            <summary>
            禁用系统
            </summary>
            <param name="id">系统id（非空）</param>
            <param name="falg">true(禁用),false(启用)</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.UserController">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.GetUser(System.String,System.String)">
            <summary>
            获取用户数据
            </summary>
            <param name="ids">用户id或guid集合（可空）</param>
            <param name="key">用户名/姓名（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.GetUserByPage(System.Int32,System.Int32,System.String)">
            <summary>
            获取全部用户并分页
            </summary>
            <param name="page">页码</param>
            <param name="pageSize">页大小</param>
            <param name="key">用户名/姓名（可空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.GetUserByToken(System.String)">
            <summary>
            根据token获取用户详情
            </summary>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.PostUser(Xu.Model.Models.User)">
            <summary>
            添加用户
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.PutUser(Xu.Model.Models.User)">
            <summary>
            更新用户
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.DeleteUser(System.Int32)">
            <summary>
            删除用户
            </summary>
            <param name="id">用户id（非空）</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.UserController.DisableUser(System.Int32,System.Boolean)">
            <summary>
            禁用用户
            </summary>
            <param name="id">用户id（非空）</param>
            <param name="falg">true(禁用),false(启用)</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.Controllers.ValueController">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.ValueController.RedisMq(Xu.Extensions.IRedisBasketRepository)">
            <summary>
            测试Redis消息队列
            </summary>
            <param name="_redisBasketRepository"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.ValueController.EventBusTry(Xu.EventBus.IEventBus,System.Int32)">
            <summary>
            测试RabbitMQ事件总线
            </summary>
            <param name="_eventBus"></param>
            <param name="blogId"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.ValueController.GetUserInfo(System.String)">
            <summary>
            通过 HttpContext 获取用户信息
            </summary>
            <param name="ClaimType">声明类型，默认 jti </param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.ValueController.FluentVaTest(Xu.Core.UserRegisterVo)">
            <summary>
            测试Fulent做参数校验
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.ValueController.GetHtmlMiniProfiler">
            <summary>
            获取MiniProfiler的html代码片段
            </summary>
            <remarks>将生成的内容拷贝出来粘贴在Swagger的index.html顶部</remarks>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Controllers.ValueController.GetAllConfigByAppllo(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            测试接入Apollo获取配置信息
            </summary>
        </member>
        <member name="M:Xu.WebApi.Controllers.ValueController.GetConfigByAppllo(System.String)">
            <summary>
            通过此处的key格式为 xx:xx:x
            </summary>
        </member>
        <member name="T:Xu.WebApi.AntiSqlInjectFilter">
            <summary>
            SQL注入过滤器
            </summary>
        </member>
        <member name="M:Xu.WebApi.AntiSqlInjectFilter.PostModelFieldFilter(System.Type,System.Object)">
            <summary>
            遍历实体的字符串属性
            </summary>
            <param name="type">数据类型</param>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="T:Xu.WebApi.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:Xu.WebApi.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:Xu.WebApi.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:Xu.WebApi.CustomRouteAttribute.#ctor(Xu.Extensions.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
        <member name="T:Xu.WebApi.DataDecryptFilter">
            <summary>
            数据解密过滤器
            前端只对post请求接口进行加密
            </summary>
        </member>
        <member name="M:Xu.WebApi.DataDecryptFilter.ConvertObject(System.Object,System.Type)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <param name="obj">待转换的对象</param>
            <param name="type">目标类型</param>
            <returns>转换后的对象</returns>
        </member>
        <member name="T:Xu.WebApi.GlobalRouteAuthorizeConvention">
            <summary>
            Summary:全局路由权限公约
            Remarks:目的是针对不同的路由，采用不同的授权过滤器
            如果 controller 上不加 [Authorize] 特性，默认都是 Permission 策略
            否则，如果想特例其他授权机制的话，需要在 controller 上带上  [Authorize]，然后再action上自定义授权即可，比如 [Authorize(Roles = "Admin")]
            </summary>
        </member>
        <member name="T:Xu.WebApi.GlobalAuthorizeFilter">
            <summary>
            全局权限过滤器【无效】
            </summary>
        </member>
        <member name="T:Xu.WebApi.GlobalExceptionsFilter">
            <summary>
            全局异常错误日志
            </summary>
        </member>
        <member name="M:Xu.WebApi.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:Xu.WebApi.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:Xu.WebApi.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="T:Xu.WebApi.GlobalRoutePrefixFilter">
            <summary>
            全局路由前缀公约
            </summary>
        </member>
        <member name="T:Xu.WebApi.XSSFilterAttribute">
            <summary>
            XSS 过滤器
            </summary>
            <remarks>在需要进行XSS过滤的控制器或者action上加上对应的[XSSFilt]属性即可</remarks>
        </member>
        <member name="M:Xu.WebApi.XSSFilterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            OnActionExecuting
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Xu.WebApi.XSSFilterAttribute.PostModelFieldFilter(System.Type,System.Object)">
            <summary>
            遍历实体的字符串属性
            </summary>
            <param name="type">数据类型</param>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Xu.WebApi.Program.Main(System.String[])">
            <summary>
            Main方法负责初始化Web主机，调用Startup和执行应用程序
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Xu.WebApi.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            应用程序运行时将服务添加到容器中
            </summary>
            <param name="services"></param>
            <remarks>
            权重：AddSingleton→AddTransient→AddScoped
            AddSingleton的生命周期：项目启动-项目关闭 相当于静态类  只会有一个
            AddScoped   的生命周期：请求开始-请求结束  在这次请求中获取的对象都是同一个
            AddTransient的生命周期：请求获取-（GC回收-主动释放） 每一次获取的对象都不是同一个
            </remarks>
        </member>
        <member name="T:Xu.Controllers.WeChatController">
            <summary>
            微信公众号管理
            作者:胡丁文
            时间:2020-3-29 21:24:12
            </summary>
        </member>
        <member name="M:Xu.Controllers.WeChatController.#ctor(Xu.IServices.IWeChatConfigServices,Microsoft.Extensions.Logging.ILogger{Xu.Controllers.WeChatController})">
            <summary>
            构造函数
            </summary>
            <param name="weChatConfigServices"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Xu.Controllers.WeChatController.GetToken(System.String)">
            <summary>
            更新Token
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatController.RefreshToken(System.String)">
            <summary>
            刷新Token
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatController.GetTemplate(System.String)">
            <summary>
            获取模板
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatController.GetMenu(System.String)">
            <summary>
            获取菜单
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatController.UpdateMenu(Xu.Model.ViewModels.WeChatApiDto)">
            <summary>
            更新菜单
            </summary>
            <param name="menu"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatController.GetSubUsers(System.String)">
            <summary>
            获取订阅用户(所有)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatController.Valid(Xu.Model.ViewModels.WeChatValidDto)">
            <summary>
            入口
            </summary>
            <param name="validDto"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatController.GetSubUser(System.String,System.String)">
            <summary>
            获取订阅用户
            </summary>
            <param name="id"></param>
            <param name="openid"></param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatController.GetQRBind(Xu.Model.ViewModels.WeChatUserInfo)">
            <summary>
            获取一个绑定员工公众号二维码
            </summary>
            <param name="info">消息</param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatController.PushCardMsg(Xu.Model.ViewModels.WeChatCardMsgDataDto)">
            <summary>
            推送卡片消息接口
            </summary>
            <param name="msg">卡片消息对象</param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatController.PushTxtMsg(Xu.Model.ViewModels.WeChatPushTestDto)">
            <summary>
            推送文本消息
            </summary>
            <param name="msg">消息对象</param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatController.GetBindUserInfo(Xu.Model.ViewModels.WeChatUserInfo)">
            <summary>
            通过绑定用户获取微信用户信息(一般用于初次绑定检测)
            </summary>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatController.UnBind(Xu.Model.ViewModels.WeChatUserInfo)">
            <summary>
            用户解绑
            </summary>
            <param name="info">消息</param>
            <returns></returns>
        </member>
        <member name="T:Xu.Controllers.WeChatPushLogController">
            <summary>
            WeChatPushLogController
            </summary>
        </member>
        <member name="M:Xu.Controllers.WeChatPushLogController.#ctor(Xu.IServices.IWeChatPushLogServices)">
            <summary>
            构造函数
            </summary>
            <param name="iWeChatPushLogServices"></param>
        </member>
        <member name="M:Xu.Controllers.WeChatPushLogController.Get(Xu.Model.PaginationModel)">
            <summary>
            获取
            </summary>
            <param name="pagination">分页条件</param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatPushLogController.Get(System.String)">
            <summary>
            获取(id)
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatPushLogController.Post(Xu.Model.Models.WeChatPushLog)">
            <summary>
            添加
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatPushLogController.Put(Xu.Model.Models.WeChatPushLog)">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatPushLogController.Delete(System.String)">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xu.Controllers.WeChatPushLogController.BatchDelete(System.String)">
            <summary>
            批量删除
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
